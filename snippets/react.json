{
  "react typescript funcional component": {
    "prefix": "rtfc",
    "body": [
      "import React from 'react';",
      "",
      "interface I${TM_FILENAME_BASE} {",
      "  ${1}",
      "}",
      "",
      "const ${TM_FILENAME_BASE} = ({${2}}: I${TM_FILENAME_BASE} ) => {",
      "  return (",
      "    ${3}",
      "  );",
      "};",
      "",
      "export { ${TM_FILENAME_BASE} };",
      ""
    ],
    "description": "React Typescript funcional component"
  },
  "react typescript functional component observer": {
    "prefix": "rtfco",
    "body": [
      "import React from 'react';",
      "import { observe } from 'mobx-react';",
      "",
      "interface I${TM_FILENAME_BASE} {",
      "  ${1}",
      "}",
      "",
      "const ${TM_FILENAME_BASE} = observe(({${2}}: I${TM_FILENAME_BASE} ) => {",
      "  return (",
      "    ${3}",
      "  );",
      "});",
      "",
      "export ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "React typescript functional component observer"
  },
  "react typescript stateful component": {
    "prefix": "rtsc",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "interface I${TM_FILENAME_BASE} {",
      "  ${1}",
      "}",
      "",
      "class ${TM_FILENAME_BASE} extends Component<I${TM_FILENAME_BASE}> {",
      "  public static defaultProps = {",
      "    ${4}",
      "  };",
      "  public render() {",
      "    const {${2}} = this.props;",
      "    return (",
      "      ${3}",
      "    );",
      "  }",
      "}",
      "",
      "export ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "React Typescript stateful component"
  },
  "react functional component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "const ${TM_FILENAME_BASE} = () => (",
      "  ${1}",
      ");",
      "",
      "export ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "React functional component"
  },
  "styled component": {
    "prefix": "sc",
    "body": "export const ${1:ComponentName} = styled.${2:Component}`\n\t\n`;"
  },
  "useCallback": {
    "key": "useCallback",
    "prefix": "useCallbackSnippet",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ]
  },
  "useMemo": {
    "key": "useMemo",
    "prefix": "useMemoSnippet",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState": {
    "key": "useState",
    "prefix": "useStateSnippet",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  }
}
